# Project Description - Tourista

## Project Overview

- **Purpose/Goal**: A flexible and powerful onboarding tour library for React applications that enables developers to create guided walkthroughs with support for both synchronous and asynchronous multi-step processes
- **Tech Stack**:
  - TypeScript
  - React 18+ (with hooks)
  - Next.js 14+ (optional peer dependency)
  - @tinystack/machine (state machine library)
  - @floating-ui/react (positioning)
  - framer-motion (animations)
  - Build: tsup, pnpm
  - Linting: ESLint with TypeScript support
  - Git hooks: Husky
- **Project Type**: React component library / NPM package
- **Target Audience**: React developers who need to implement onboarding tours, feature walkthroughs, or guided tutorials in their applications

## Architecture & Structure

- **Architecture Pattern**: Component-based architecture with state machine pattern for tour flow control
- **Design Patterns**:
  - State Machine Pattern (using @tinystack/machine for tour state management)
  - Context/Provider Pattern (TourProvider for global tour state)
  - Custom Hooks Pattern (useTour, useTourState for accessing tour functionality)
  - Factory Pattern (generateTourMachine for dynamic state machine creation)
  - Observer Pattern (subscription to actor state changes)
- **Data Flow**:
  1. TourProvider wraps the application and provides tour configuration
  2. TourMachine component initializes a state machine actor when tour starts
  3. State machine manages tour progression through steps (sync/async)
  4. Components subscribe to state changes via useSyncExternalStore
  5. UI updates based on current state and context from the state machine
- **State Management**:
  - Global tour state via React Context (TourProvider)
  - Tour flow state via state machine actors (@tinystack/machine)
  - Local component state for UI interactions
  - Sync with browser navigation (Next.js router integration)

## Folder Structure

```
react-onboard-tour/
├── .claude/                    # Claude AI configuration
├── .cursor/                    # Cursor IDE configuration
│   └── rules/                  # Project rules and descriptions
├── .husky/                     # Git hooks configuration
│   └── _/                      # Husky internal files
├── .learnings/                 # Project learnings and notes
├── dist/                       # Build output (distributed files)
├── scripts/                    # Development scripts
│   └── setup-dev.sh            # Development environment setup
├── src/                        # Source code
│   ├── components/             # React components
│   │   ├── DebugPanel.tsx      # Debug panel for development
│   │   ├── DefaultCard.tsx     # Default tour card UI component
│   │   ├── TourConfigViewer.tsx # Tour configuration viewer
│   │   ├── TourMachineReact.tsx # Main tour state machine component
│   │   ├── TourOverlay.tsx     # Overlay component for highlighting
│   │   └── TourProvider.tsx    # Context provider for tour state
│   ├── helpers/                # Utility functions
│   │   ├── scrollIfNeeded.ts   # Scroll utility for element visibility
│   │   ├── tourMachineGenerator.ts # State machine factory
│   │   ├── useIsObjectRefChanging.ts # Debug hook for ref changes
│   │   └── useLifeCycleLog.ts  # Debug hook for lifecycle logging
│   ├── types/                  # TypeScript type definitions
│   │   └── index.ts            # All type exports
│   ├── const.ts                # Constants and defaults
│   └── index.ts                # Main entry point and exports
├── .eslintrc.json              # ESLint configuration
├── .gitignore                  # Git ignore rules
├── package.json                # Package configuration
├── pnpm-lock.yaml              # Lock file for dependencies
├── README.md                   # Project documentation
└── tsconfig.json               # TypeScript configuration
```

## Core Components

### Main Components

- **TourProvider**: Context provider that manages global tour state, provides startTour, endTour, and tour configuration to child components
- **TourMachine**: Core component that creates and manages the state machine actor, handles navigation, keyboard controls, and renders the tour overlay
- **TourOverlay**: Renders the highlight overlay around target elements and positions the tour card using Floating UI
- **DefaultCard**: Default UI component for tour steps, displays title, content, navigation buttons, and progress indicators
- **TourConfigViewer**: Development tool that displays the current tour configuration in a formatted view
- **DebugPanel**: Development panel showing current state, context, and machine visualization for debugging

### Custom Hooks

- **useTour**: Access tour context including startTour, endTour, isActive state, and tour configuration
- **useTourState**: Get current tour state, step data, navigation capabilities, and control functions (nextStep, prevStep, skipTour)
- **useIsObjectRefChanging**: Development hook to detect when object references change between renders
- **useLifecycleLog**: Development hook to log component lifecycle events for debugging

### Types/Interfaces

- **TourConfig**: Main configuration object defining tour ID, steps array, and navigation settings
- **TourStep**: Individual step configuration supporting both sync and async types with content, targeting, and navigation options
- **TourContext**: State machine context containing current tourId, page, targetElement, title, and content
- **BaseTourEvent**: Union type of all possible tour events (NEXT, PREV, PAGE_CHANGED, START_TOUR, END_TOUR, SKIP_TOUR, AUTO_ADVANCE)
- **CardProps**: Props interface for custom card components with step info and control functions
- **StepContent**: Content structure for async steps with targetElement, title, and content fields
- **ExtractStates**: Type helper to extract all possible state values from a tour configuration
- **OverlayStyles**: Customization options for overlay appearance (radius, padding, opacity, color)
- **CardPositioning**: Configuration for card placement relative to target elements

### Key Constants

- **STYLE_DEFAULT**: Default overlay styling with radius: 10, padding: 10, opacity: 0.2, colorRgb: '0, 0, 0'
- **CARD_POSITIONING_DEFAULT**: Default card positioning with floating: true, side: 'top', distancePx: 0

### Helper Functions

- **generateTourMachine**: Factory function that creates a state machine configuration from TourConfig
- **createTourHelpers**: Creates utility functions for getting step index and total steps
- **getAsyncTaskInfo/getAsyncTaskInfoById**: Retrieve async step information and sub-states
- **addEventTrackingToMachine**: Enhances state machine with event tracking capabilities
- **scrollIfNeeded**: Utility to scroll elements into view when needed during tour navigation
